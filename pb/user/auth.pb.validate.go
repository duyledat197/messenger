// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/auth.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 20 {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordRequestMultiError, or nil if none found.
func (m *ForgotPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ForgotPasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ForgotPasswordRequestMultiError(errors)
	}

	return nil
}

// ForgotPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordRequestMultiError) AllErrors() []error { return m }

// ForgotPasswordRequestValidationError is the validation error returned by
// ForgotPasswordRequest.Validate if the designated constraints aren't met.
type ForgotPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordRequestValidationError) ErrorName() string {
	return "ForgotPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordRequestValidationError{}

// Validate checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordResponseMultiError, or nil if none found.
func (m *ForgotPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ForgotPasswordResponseMultiError(errors)
	}

	return nil
}

// ForgotPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordResponseMultiError) AllErrors() []error { return m }

// ForgotPasswordResponseValidationError is the validation error returned by
// ForgotPasswordResponse.Validate if the designated constraints aren't met.
type ForgotPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordResponseValidationError) ErrorName() string {
	return "ForgotPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordResponseValidationError{}

// Validate checks the field values on VerifyOTPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOTPRequestMultiError, or nil if none found.
func (m *VerifyOTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Otp

	if len(errors) > 0 {
		return VerifyOTPRequestMultiError(errors)
	}

	return nil
}

// VerifyOTPRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyOTPRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyOTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOTPRequestMultiError) AllErrors() []error { return m }

// VerifyOTPRequestValidationError is the validation error returned by
// VerifyOTPRequest.Validate if the designated constraints aren't met.
type VerifyOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOTPRequestValidationError) ErrorName() string { return "VerifyOTPRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOTPRequestValidationError{}

// Validate checks the field values on VerifyOTPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOTPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOTPResponseMultiError, or nil if none found.
func (m *VerifyOTPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOTPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyOTPResponseMultiError(errors)
	}

	return nil
}

// VerifyOTPResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyOTPResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyOTPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOTPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOTPResponseMultiError) AllErrors() []error { return m }

// VerifyOTPResponseValidationError is the validation error returned by
// VerifyOTPResponse.Validate if the designated constraints aren't met.
type VerifyOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOTPResponseValidationError) ErrorName() string {
	return "VerifyOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOTPResponseValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ResetPasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 20 {
		err := ResetPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResponseMultiError, or nil if none found.
func (m *ResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordResponseMultiError(errors)
	}

	return nil
}

// ResetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResponseMultiError) AllErrors() []error { return m }

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestMultiError, or nil if none found.
func (m *ChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ChangePasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := ChangePasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 20 {
		err := ChangePasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePasswordRequestMultiError(errors)
	}

	return nil
}

// ChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestMultiError) AllErrors() []error { return m }

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordResponseMultiError, or nil if none found.
func (m *ChangePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordResponseMultiError(errors)
	}

	return nil
}

// ChangePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordResponseMultiError) AllErrors() []error { return m }

// ChangePasswordResponseValidationError is the validation error returned by
// ChangePasswordResponse.Validate if the designated constraints aren't met.
type ChangePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordResponseValidationError) ErrorName() string {
	return "ChangePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordResponseValidationError{}

// Validate checks the field values on GenerateOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateOTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOTPRequestMultiError, or nil if none found.
func (m *GenerateOTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateOTPRequestMultiError(errors)
	}

	return nil
}

// GenerateOTPRequestMultiError is an error wrapping multiple validation errors
// returned by GenerateOTPRequest.ValidateAll() if the designated constraints
// aren't met.
type GenerateOTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOTPRequestMultiError) AllErrors() []error { return m }

// GenerateOTPRequestValidationError is the validation error returned by
// GenerateOTPRequest.Validate if the designated constraints aren't met.
type GenerateOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOTPRequestValidationError) ErrorName() string {
	return "GenerateOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOTPRequestValidationError{}

// Validate checks the field values on GenerateOTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateOTPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOTPResponseMultiError, or nil if none found.
func (m *GenerateOTPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOTPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OtpAuthUrl

	// no validation rules for Base32

	if len(errors) > 0 {
		return GenerateOTPResponseMultiError(errors)
	}

	return nil
}

// GenerateOTPResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateOTPResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateOTPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOTPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOTPResponseMultiError) AllErrors() []error { return m }

// GenerateOTPResponseValidationError is the validation error returned by
// GenerateOTPResponse.Validate if the designated constraints aren't met.
type GenerateOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOTPResponseValidationError) ErrorName() string {
	return "GenerateOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOTPResponseValidationError{}

// Validate checks the field values on Disable2FARequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Disable2FARequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Disable2FARequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Disable2FARequestMultiError, or nil if none found.
func (m *Disable2FARequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Disable2FARequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Disable2FARequestMultiError(errors)
	}

	return nil
}

// Disable2FARequestMultiError is an error wrapping multiple validation errors
// returned by Disable2FARequest.ValidateAll() if the designated constraints
// aren't met.
type Disable2FARequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Disable2FARequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Disable2FARequestMultiError) AllErrors() []error { return m }

// Disable2FARequestValidationError is the validation error returned by
// Disable2FARequest.Validate if the designated constraints aren't met.
type Disable2FARequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Disable2FARequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Disable2FARequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Disable2FARequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Disable2FARequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Disable2FARequestValidationError) ErrorName() string {
	return "Disable2FARequestValidationError"
}

// Error satisfies the builtin error interface
func (e Disable2FARequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisable2FARequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Disable2FARequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Disable2FARequestValidationError{}

// Validate checks the field values on Disable2FAResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Disable2FAResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Disable2FAResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Disable2FAResponseMultiError, or nil if none found.
func (m *Disable2FAResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Disable2FAResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Disable2FAResponseMultiError(errors)
	}

	return nil
}

// Disable2FAResponseMultiError is an error wrapping multiple validation errors
// returned by Disable2FAResponse.ValidateAll() if the designated constraints
// aren't met.
type Disable2FAResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Disable2FAResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Disable2FAResponseMultiError) AllErrors() []error { return m }

// Disable2FAResponseValidationError is the validation error returned by
// Disable2FAResponse.Validate if the designated constraints aren't met.
type Disable2FAResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Disable2FAResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Disable2FAResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Disable2FAResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Disable2FAResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Disable2FAResponseValidationError) ErrorName() string {
	return "Disable2FAResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Disable2FAResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisable2FAResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Disable2FAResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Disable2FAResponseValidationError{}

// Validate checks the field values on Enable2FARequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Enable2FARequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Enable2FARequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Enable2FARequestMultiError, or nil if none found.
func (m *Enable2FARequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Enable2FARequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Enable2FARequestMultiError(errors)
	}

	return nil
}

// Enable2FARequestMultiError is an error wrapping multiple validation errors
// returned by Enable2FARequest.ValidateAll() if the designated constraints
// aren't met.
type Enable2FARequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Enable2FARequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Enable2FARequestMultiError) AllErrors() []error { return m }

// Enable2FARequestValidationError is the validation error returned by
// Enable2FARequest.Validate if the designated constraints aren't met.
type Enable2FARequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Enable2FARequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Enable2FARequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Enable2FARequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Enable2FARequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Enable2FARequestValidationError) ErrorName() string { return "Enable2FARequestValidationError" }

// Error satisfies the builtin error interface
func (e Enable2FARequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnable2FARequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Enable2FARequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Enable2FARequestValidationError{}

// Validate checks the field values on Enable2FAResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Enable2FAResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Enable2FAResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Enable2FAResponseMultiError, or nil if none found.
func (m *Enable2FAResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Enable2FAResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Enable2FAResponseMultiError(errors)
	}

	return nil
}

// Enable2FAResponseMultiError is an error wrapping multiple validation errors
// returned by Enable2FAResponse.ValidateAll() if the designated constraints
// aren't met.
type Enable2FAResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Enable2FAResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Enable2FAResponseMultiError) AllErrors() []error { return m }

// Enable2FAResponseValidationError is the validation error returned by
// Enable2FAResponse.Validate if the designated constraints aren't met.
type Enable2FAResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Enable2FAResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Enable2FAResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Enable2FAResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Enable2FAResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Enable2FAResponseValidationError) ErrorName() string {
	return "Enable2FAResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Enable2FAResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnable2FAResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Enable2FAResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Enable2FAResponseValidationError{}
