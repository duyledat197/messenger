// Code generated by protoc-gen-http-client. DO NOT EDIT.
// version: 3.14.0
// source: user/auth.proto

package user

import (
	"context"
	"fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"net/http"
	"net/url"
	util "openmyth/messgener/util"
	httpclient "openmyth/messgener/util/http_client"
)

// HTTPClient is a http client for the AuthService service
type AuthServiceHTTPClient struct {
	BaseURL      string
	roundTripper http.RoundTripper
}

func NewAuthServiceHTTPClient(baseURL string) *AuthServiceHTTPClient {
	return &AuthServiceHTTPClient{
		BaseURL:      baseURL,
		roundTripper: httpclient.NewRoundTripper(),
	}
} // Login is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) Login(ctx context.Context, reqData *LoginRequest) (*LoginResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/login")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[LoginResponse](resp)
} // ForgotPassword is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) ForgotPassword(ctx context.Context, reqData *ForgotPasswordRequest) (*ForgotPasswordResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/forgot-password")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[ForgotPasswordResponse](resp)
} // Disable2FA is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) Disable2FA(ctx context.Context, reqData *Disable2FARequest) (*Disable2FAResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/otp/disable")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[Disable2FAResponse](resp)
} // GenerateOTP is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) GenerateOTP(ctx context.Context, reqData *GenerateOTPRequest) (*GenerateOTPResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/otp/generate")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[GenerateOTPResponse](resp)
} // VerifyOTP is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) VerifyOTP(ctx context.Context, reqData *VerifyOTPRequest) (*VerifyOTPResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/otp/verify")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[VerifyOTPResponse](resp)
} // ResetPassword is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) ResetPassword(ctx context.Context, reqData *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/reset-password")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[ResetPasswordResponse](resp)
} // ChangePassword is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) ChangePassword(ctx context.Context, reqData *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/change-password")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "PUT", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[ChangePasswordResponse](resp)
} // Enable2FA is a http call method for the AuthService service
func (c *AuthServiceHTTPClient) Enable2FA(ctx context.Context, reqData *Enable2FARequest) (*Enable2FAResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/auth/otp/enable")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[Enable2FAResponse](resp)
}
