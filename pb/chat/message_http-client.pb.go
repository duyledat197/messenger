// Code generated by protoc-gen-http-client. DO NOT EDIT.
// version: 3.14.0
// source: chat/message.proto

package chat

import (
	"context"
	"fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"net/http"
	"net/url"
	util "openmyth/messgener/util"
	httpclient "openmyth/messgener/util/http_client"
)

// HTTPClient is a http client for the MessageService service
type MessageServiceHTTPClient struct {
	BaseURL      string
	roundTripper http.RoundTripper
}

func NewMessageServiceHTTPClient(baseURL string) *MessageServiceHTTPClient {
	return &MessageServiceHTTPClient{
		BaseURL:      baseURL,
		roundTripper: httpclient.NewRoundTripper(),
	}
} // GetMessageListChannel is a http call method for the MessageService service
func (c *MessageServiceHTTPClient) GetMessageListChannel(ctx context.Context, reqData *GetMessageListChannelRequest) (*GetMessageListChannelResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/channels/{channel_id}/messages")
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{Transport: c.roundTripper}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Errorf(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[GetMessageListChannelResponse](resp)
}
